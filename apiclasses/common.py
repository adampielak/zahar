# magic from https://stackoverflow.com/questions/40182157/python-click-shared-options-and-flags-between-commands

import click

# time

time_from = [ click.option('--time_from', help='Return only objects that have been generated after the given time')]
time_till = [ click.option('--time_till', help='Return only objects that have been generated before the given time.')]

# booleans

inherited = [ click.option('--inherited', is_flag=True, default=False, help='Return only objects inherited from a template.')]
templated = [ click.option('--templated', is_flag=True, default=False, help='Return only objects that belong to a template.')]
monitored = [ click.option('--monitored', is_flag=True, default=False, help='Return only enabled objects that belong to monitored host.')]

editable = [ click.option('--editable', is_flag=True, default=False, help='Return objects with write permissions.')]

# flags

countOutput = [ click.option('--countOutput', 'countOutput', is_flag=True, default=None, help='Return count of records instead of data.')]
expandStepName = [ click.option('--expandStepName', 'expandStepName', is_flag=True, default=None, help='Expand macros in the names of steps.')]
expandName  = [ click.option('--expandName',  'expandName',  is_flag=True, default=None, help='Expand macros in the name.')]
select_image  = [ click.option('--select_image',  'select_image',  is_flag=True, default=None, help='Return the Base64 encoded image in the image property.')]

# ints

# todo: make this a choices
eventobject      = [ click.option('--eventobject',      'eventobject',      default='0', help='Return objects generated by events related to objects of the given type.')]
eventsource      = [ click.option('--eventsource',      'eventsource',      default='0', help='Return objects generated by events of the given type')]

# ids

actionids      = [ click.option('--actionid',      'actionids',      type=int, multiple=True, help='Return responses with the given action ids.')]
correlationids = [ click.option('--correlationid', 'correlationids', type=int, multiple=True, help='Return responses with the given correlation ids.')]
httptestids    = [ click.option('--httptestid',    'httptestids',    type=int, multiple=True, help='Return responses with the given httptest ids.')]
discoveryids   = [ click.option('--discoveryid',   'discoveryids',   type=int, multiple=True, help='Return responses with the given discovery ids.')]
alertids       = [ click.option('--alertid',       'alertids',       type=int, multiple=True, help='Return responses with the given alert ids.')]
applicationids = [ click.option('--applicationid', 'applicationids', type=int, multiple=True, help='Return only actions that are configured to send messages to the given user groups.')]
eventids       = [ click.option('--eventid',       'eventids',       type=int, multiple=True, help='Return only actions that are configured to send messages to the given user groups.')]
groupids       = [ click.option('--groupid',       'groupids',       type=int, multiple=True, help='Return responses that use the host groups in conditions')]
hostids        = [ click.option('--hostid',        'hostids',        type=int, multiple=True, help='Return responses that use the host id.')]
correlationids = [ click.option('--correlationid', 'correlationids', type=int, multiple=True, help='Return only objects with the given correlations IDs.')]
itemids        = [ click.option('--itemid',        'itemids',        type=int, multiple=True, help='Return only actions that are configured to send messages to the given user groups.')]
mediatypeids   = [ click.option('--mediatypeid',   'mediatypeids',   type=int, multiple=True, help='Return only actions that use the given media types to send messages.')]
objectids      = [ click.option('--objectid',      'objectids',      type=int, multiple=True, help='Return only actions that are configured to send messages to the given user groups.')]
scriptids      = [ click.option('--scriptid',      'scriptids',      type=int, multiple=True, help='Return only actions that are configured to run the given scripts.')]
triggerids     = [ click.option('--triggerid',     'triggerids',     type=int, multiple=True, help='Return only actions that use the given triggers in action conditions.')]
userids        = [ click.option('--userid',        'userids',        type=int, multiple=True, help='Return only actions that are configured to send messages to the given users.')]
usrgrpids      = [ click.option('--usrgrpid',      'usrgrpids',      type=int, multiple=True, help='Return only actions that are configured to send messages to the given user groups.')]
dhostids       = [ click.option('--dhostid',       'dhostids',       type=int, multiple=True, help='Return only objects with the Discovered Host ID')]
dcheckids      = [ click.option('--dcheckid',      'dcheckids',      type=int, multiple=True, help='Return only objects with the Discovered Host ID')]
druleids       = [ click.option('--druleid',       'druleids',       type=int, multiple=True, help='Return only discovered hosts that have been created by the given discovery rules.')]
dserviceids    = [ click.option('--dserviceid',    'dserviceids',    type=int, multiple=True, help='Return only discovered hosts that are running the given services.')]
templateids    = [ click.option('--templateid',    'templateids',    type=int, multiple=True, help='Return objects that use the given template ids.')]
graphids       = [ click.option('--graphid',       'graphids',       type=int, multiple=True, help='Return objects that use the given graph ids.')]
imageids       = [ click.option('--imageid',       'imageids',       type=int, multiple=True, help='Return objects that use the given image ids.')]
sysmapids      = [ click.option('--sysmapid',      'sysmapids',      type=int, multiple=True, help='Return objects that use the given sysmap ids.')]



# todo: for future use once we sort out passing queries
# selectFilter = [
#     click.option('--selectFilter', 'selectFilter',
#                help='Returns the action filter in the filter property.'),
#    ]

# todo: for future use once we sort out passing queries
# selectOperations = [
#    click.option('--selectOperations', 'selectOperations',
#                help='Return action operations in the operations property.'),
#    ]

# todo: for future use once we sort out passing queries
# selectRecoveryOperations = [
#    click.option('--selectRecoveryOperations', 'selectRecoveryOperations',
#                help='Return action recovery operations in the recoveryOperations property.'),
#    ]

# todo: for future use once we sort out passing dynamic choices
# sortfield = [
#    click.option('--sortfield',
#        help='Sort the result by the given properties.'),
#    ]

# These parameters being common for all get methods


filter = [
    click.option('--filter',
                 help='Return only results that exactly match the filter.'),
    ]

limit = [
    click.option('--limit',
                 type=int, default=1000,
                 help='Limit results returned.'),
    ]

output = [
    click.option('--output',
                 multiple=True,
                 help='Object properties to be returned (refered to as "output" in API docs).'),
    ]

# todo: this messes up stuff, should we keep it?
preservekeys = [
    click.option('--preservekeys',
                 is_flag=True, default=None,
                 help='Use IDs as keys in the resulting array.'),
    ]

search = [
    click.option('--search',
                 help='Return results that match wildcard search (case-insensitive).'),
    ]

excludeSearch = [
    click.option('--excludeSearch', 'excludeSearch',
                 is_flag=True, default=None,
                 help='Return results that do not match the search criteria.'),
    ]

searchByAny = [
    click.option('--searchByAny', 'searchByAny',
                 is_flag=True, default=False,
                 help='Return results that match either filter or search instead of all of them'),
    ]

searchWildcardsEnabled = [
    click.option('--searchWildcardsEnabled', 'searchWildcardsEnabled',
                 is_flag=True, default=False,
                 help='Enables use of "*" as a wildcard character'),
    ]

startSearch = [
    click.option('--startSearch', 'startSearch',
                 is_flag=True, default=None,
                 help='Compare from the beginning of fields.'),
    ]

sortorder = [
    click.option('--sortorder',
                 type=click.Choice(['ASC', 'DESC']),
                 help='Order of sorting'),
    ]

# These parmataers are common for all zart commands
# we add them to the end rather than the start as they
# are more natural

outputformat = [
    click.option('-f', 'outputformat',
                default='txt',
                type=click.Choice(['csv', 'html', 'json', 'latex', 'raw', 'clip', 'xls', 'txt']),
                help='Output format.')
    ]

def add_options(options):
    def _add_options(func):
        for option in reversed(options):
            func = option(func)
        return func
    return _add_options
